#!/bin/bash

if [ -n "$CONFIG" ]; then
        echo '^tide$|^tides$|^marea|^mareas|^tide .*$|^tides .*$|^marea .*$|^mareas .*$|^gehzeiten .*$'
        exit 0
fi

TORIFY="torify"

# tor and torify should be installed for your privacy.
type torify >/dev/null 2>&1 || {
        echo "It is recommended that you install the packge \"tor\" on the server for privacy."
        TORIFY=""
}

# xmllint must be installed
type xmllint >/dev/null 2>&1 || {
        # see: https://github.com/fcambus/ansiweather
        echo "This script requires that you install the packge \"xmllint\" (libxml2-utils) on the server."
        exit 0
}

# $1: location, city
# $2: optional, "full" for more details
function gettide() {
        if [[ "$2" == "full" ]] || [[ "$2" == "f" ]] || [[ "$2" == "more" ]] || [[ "$2" == "+" ]]; then
                # give a full, long listing of forecast
                echo "To be implemented" # to be implemented
        elif [[ "$2" == "short" ]] || [[ "$2" == "less" ]] || [[ "$2" == "s" ]] || [[ "$2" == "l" ]] || [[ "$2" == "-" ]]; then
                # give a short, terse listing of forecast
                echo -n "${1^}: "
                # shellcheck disable=SC2086
                $TORIFY wget -q -O - https://www.tide-forecast.com/locations/${1}/tides/latest | \
                        xmllint --html --xpath '//table[@class = "tide-times__table--table"]/tbody/tr/td' - 2>/dev/null | \
                        sed "s|<td><b>| |g" | sed "s|</b></td>| |g" | sed "s|<span class=\"today__tide-times--nextrow\">| |g" | \
                        sed "s|</span>| |g" | sed 's|<td class="js-two-units-length-value" data-units="Imperial"><b class="js-two-units-length-value__primary">| |g' | \
                        sed 's|</b><span class="today__tide-times--nextrow js-two-units-length-value__secondary">| |g' | \
                        sed 's|<td class="js-two-units-length-value" data-units="Metric">| |g' | \
                        sed 's|<b class="js-two-units-length-value__primary">| |g' | \
                        sed "s|</td>||g" | tr -d '\n' | sed "s|Low Tide|\nLow  Tide|g" | sed "s|High Tide|\nHigh Tide|g" | \
                        sed 's|([^)]*)||g' | sed 's|     |  |g' | sed 's| Tide  | |g' | sed 's|m   |m|g' | sed 's| m|m|g'
                echo "" # add newline
        else
                # give a mediaum, default listing of tides, just today
                echo -n "${1^}: "
                # shellcheck disable=SC2086
                $TORIFY wget -q -O - https://www.tide-forecast.com/locations/${1}/tides/latest | \
                        xmllint --html --xpath '//table[@class = "tide-times__table--table"]/tbody/tr/td' - 2>/dev/null | \
                        sed "s|<td><b>| |g" | sed "s|</b></td>| |g" | sed "s|<span class=\"today__tide-times--nextrow\">| |g" | \
                        sed "s|</span>| |g" | sed 's|<td class="js-two-units-length-value" data-units="Imperial"><b class="js-two-units-length-value__primary">| |g' | \
                        sed 's|</b><span class="today__tide-times--nextrow js-two-units-length-value__secondary">| |g' | \
                        sed 's|<td class="js-two-units-length-value" data-units="Metric">| |g' | \
                        sed 's|<b class="js-two-units-length-value__primary">| |g' | \
                        sed "s|</td>||g" | tr -d '\n' | sed "s|Low Tide|\nLow  Tide|g" | sed "s|High Tide|\nHigh Tide|g" | \
                        sed 's|)  |)|g'
                echo "" # add newline
        fi
}

arg1=$(echo "$1" | tr -s ' ' | cut -s -d ' ' -f 2) # tide-location, city, required
arg2=$(echo "$1" | tr -s ' ' | cut -s -d ' ' -f 3) # "full" (optional) or "short" (optional) or "notorify" (optional) or empty
arg3=$(echo "$1" | tr -s ' ' | cut -s -d ' ' -f 4) # "notorify" or empty
#echo "arguments : \"$1\""
#echo "argument 1: \"$arg1\""
#echo "argument 2: \"$arg2\""
if [ "$arg1" == "" ]; then
        echo "Example tide locations are: hamburg san-diego new-york san-fran"
        echo "Try \"tide hamburg\" for example to get the Hamburg tide forecast."
        exit 0
fi

#if [ "$arg2" == "" ]; then
#       arg2="1" # default, get only last item, if no number specified
#fi

if [ "$arg2" == "notorify" ] || [ "$arg3" == "notorify" ]; then
        TORIFY=""
        echo "Are you sure you do not want to use TOR?"
        if [ "$arg2" == "notorify" ]; then
                arg2="$arg3"
        fi
fi

function dotide() {
        arg1="${1,,}"
        arg2="${2,,}"
        case "$arg1" in
        all)
                for city in san-francisco san-diego lima; do
                        dotide "$city" "$arg2"
                        echo -e "\n\n\n"
                done
                ;;
        h | hamburg)
                gettide "Hamburg-Germany" "$arg2"
                ;;
        l | london)
                gettide "London-Bridge-England" "$arg2"
                ;;
        m | melbourne)
                gettide "Melbourne-Australia" "$arg2"
                ;;
        ny | nyc | new-york)
                gettide "New-York-New-York" "$arg2"
                ;;
        p | pornic)
                gettide "Pornic" "$arg2" # France
                ;;
        sd | san-diego)
                gettide "San-Diego-California" "$arg2"
                ;;
        sf | san-fran | san-francisco)
                gettide "San-Francisco-California" "$arg2"
                ;;
        urangan)
                gettide "Urangan-Australia" "$arg2"
                ;;
        # see https://www.tide-forecast.com for names to add as your favorite beaches
        *)
                gettide "$arg1" "$arg2"
                ;;
        esac
}

dotide "$arg1" "$arg2"

exit 0

# The __reply env variable set in the config file is not used in this script
#if [ -n "$__reply" ]
#then
#    echo "$__reply"
#else
#    echo 'P O N G'
#fi
